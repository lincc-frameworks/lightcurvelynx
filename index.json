{"project": "tdastro", "project_url": "https://github.com/lincc-frameworks/tdastro", "show_commit_url": "https://github.com/lincc-frameworks/tdastro/commit/", "hash_length": 8, "revision_to_hash": {"0": "98eb15f5c411d9a136d18b0ae5ec9df14e2f6287", "1": "30225d1b54431d19dcfe9552898df5366d798b66", "2": "678d58e603bac97e57e5c20344d46af7acaa6c33", "3": "7519ef02db3e46d29645eb024787c4780fd90e49", "4": "7bef979448ce46b5f1dcbf448f0aea941b69aeb9", "12": "3c83d1c92e7876354587e153fd6c51690cb7670b", "15": "939017a041aba63d4c1c58482442e764c79c44d1", "20": "a0462763b4e9ed6ffc8103e7b8bea746b4ae4b35", "23": "5b0a26f3a91226a095a430b47ebd8ce1ea7a2306", "27": "072c8858689e910947d32207882af6a35e7295f1", "45": "0c31e23bbc9ff156236432b7d37ca2d8429a692e", "49": "6c5f5834a43b53e27991fe8ddb0dfffbff96216a", "52": "aafcfe8f6a632ac01b1e70cc067f8c35dabbc9d7", "55": "ea30c944a7dc805fa4ab00a573cc07d5022473e5", "56": "c49b8e1208d42f6f1b30eb1bed36f98a213fd85c", "59": "01463ec2090d7a38975ec8a391f01270d519a575", "69": "40d83aa2a9294b38ee7e889d6dbe8178e44df7c8", "72": "9b287e05eb1e6d0ac9d3b11b06a4e34243592f17", "73": "eee128a6f6967a5b949582a900964648aad899fc", "77": "2bc1e09400c9c39bca72e4217c417cccf9ebeaca", "81": "da499449d7f7ae63485074401eabde47259a9c9b", "83": "ac94f790ad4e7416910d75e827a4ec5dd05eff8c", "94": "a39ced8f6f38089a38a45bc432069a407917f3aa", "101": "ac84552d6e8b12206e5ee83e8b2a5e88dcf78702", "104": "a79245922596fa1539aebb3634519c13f3fef796", "108": "8de94c58cda2139f6291c3f0f0c364030e66eb69", "115": "a94c158cd184059d704662d5592518cf23acf98a", "119": "df3e2a5bc053bea1ed8b596ee712d1874ec6bb15", "121": "80a204ee22d3ee1d759a12a4a3d0c7d9b0fc1a3d", "127": "e55b4d667fce3df3e042a015df89ee1ed5f74f99", "133": "942387df50f78dbb9ab5b0cc2e866fbb0d96bd7a", "134": "37a164458eaf54ef7d7de2e79cec4462667952ac", "136": "05e93a75cd3d01692adf83115daaa1829e22d0cc", "142": "2db4ea18398a19e5904659e69a2530f9211dac20", "144": "74cbb16b925b4b3c89bfb700d965f187a0f38579", "153": "fcd801268f2351158ba5e7ef54603e1f361a8fe5", "154": "1cf3edf6564d563310352299cb0d8a392f5c0461", "163": "dd566572f92fc5948273e34026ab95b6763c9f55", "167": "3857404946a3208a178c0158744958ab7ef6748d", "176": "c8d238a3768be764d88089078f7d5187bcc7eb09", "188": "266a5d33e226b91c991c1fa1476262bc94fd1f33", "192": "23e018626f5b85bed2346702beed12c92f7d2315", "193": "bffc5561a7378a475bdc5fb04a8797267d03e5af", "199": "103914e563b015c63f69535fb1128fc3cb84a2b2", "206": "8145ab9d42a578be1e24116f5c84edddc20cc3bc", "211": "6b3eee6373e8c50cf9aaba1878eff67db4a0e77c", "214": "d3acd6a6d5a6c08bfcd8c95df57660d5b5cf2a06", "217": "b114bef2f1b68ef8468ac2ca21abc43800e4f0e1", "222": "fdd721aa2605ee79c350ed13b117ef979c2c8b38", "226": "2dbd8b563f9a0cb5aa2732ab2f6864e7e6f4134c", "230": "de4a0614f19330ffc04c2f22959d1dbb9d3e62d2", "240": "e11ae739a1d6f220fbe09e516c3a7309a011894c", "245": "95cd0c9dbc71d0aa26456f7e1de678b3bd7306df", "248": "1a1d3706bda96a96a616cc839c53c2d05ce25e5f", "250": "60af46f25e896a2eb873ee6f252990cbbba8b540", "257": "117f7399482dcb920fb6b9822e4ca4c3d0034f47", "274": "a5f725d28e33a61a386bc8a9bab9f592fae09710", "279": "a5acdab2a74804d32c043ab4ba334d3d01bb3222", "284": "0bcc333993d6f1794893666d7f264f571fa8598b", "285": "cf6fae8192c3ccd88d872eb684602a8df25d7034", "289": "24474dc1fcf9936eb2b9a0c373cc8259bf843073", "293": "7a7b08ac346160e0507d2d5cf761aa9fc910746b", "294": "25de82cc6b08b306dfca6e78be42d994a49e0947", "300": "9ee112e9fe652dcb99168b98bdfb4d2e22c9a115", "303": "8a9444bfe2464e3cf6c7a3e2fea30b1976447551", "304": "aa81e3f282f3738f045de593dde3be79a1b5cf01", "307": "4a87261cff013be89f0e5c4a036cb36b3afd9178", "315": "9fcdf6dd2cbaec98eb42696876a3b057a6f8422f", "321": "6cbbbfa3779751414208a4b9ce1e6a88855f80d5", "328": "da0c370dae56e09f8e987fd61cae0ebb69755412", "329": "96494ce286d9c456225331e47f8598546aeeca32", "332": "0c25e49a24b27b83292808889cf1d81bb4d5a24f", "338": "91f974fa983ea52cc4e436d0107ee2880ae3bda9", "348": "1b2bc95cf15887619499ea06f0865ddb90ee1253", "356": "c3ff90fc5b0a8dadd7b998741d113741c301a5b3", "358": "a8470898e73d0a380ede24cfb40222684e7686c5", "366": "088ddc10364ac68d61eb36437cd8aa36112fe9ef", "369": "21311734e771e20fe0558c293a2cf7bf3bcc8d85", "371": "079e2e0fca5f873a101fe378bf7f88f96670c6c6", "376": "c7ecfa54cb13160d8e63a32bf15c24c974afdc51", "389": "2fb1c0f38b7d9475f1858f2718702e53ed794ba9", "392": "fba3f997d91aa5c1a838cdfbe178e0b20812c487", "399": "e7337765db2ca3f11bb6c67e6751b1cb86c797d8", "402": "412ced732b99ff4bdffcf8b346e5287e43192a54", "403": "91286c15c6e34bede1ab5e51dbaf8fe876ab37a3", "405": "2064a70dbe829a8f13ae8838f28e36ede867a5b1", "408": "f05b611ccc2dac9da1af2032b49fa4a645cfe607", "421": "27c8c7eaecd92d90c212652dd3d381428fd6c1d4", "422": "9ca5fb00414ff50778506665dc1054cbf503947d", "423": "cd62e4adcd577befcde5315dea60a9df7f9db849", "429": "e780a10ee4aa3fcf294a726fc069e55c376a146f", "431": "dc9c6b50158211217f64b5c56fa381e1f42ddba5", "438": "bcd50785bc63527bc8769a51f4eff17e0701f051", "447": "ad925bcf0c4aae8ea0305f6442b77e4983577b69", "453": "7450fccec5d30c5737d2d21772ac8d7421315c12", "458": "b3dc46ead1aa36ff160e840fcbb853942c479b52", "460": "38526eea5b8065c41e9d8f88d7323db59ebb2a7f", "463": "461eda2f69c72077eaef0a05ce95c1a98b8e699e", "466": "cfd84e0fca1148017ef6bfd4375402cfd1b19717", "467": "ffad7c494baa21c9fcf75682dfd46002ffa2b553", "470": "4a0ba5f40fcbeb99dccc8e94fa8c2cddb946ccc5", "474": "215228d18fd94ab53d6e4e99465e593133e12a95", "479": "dd22ca248b30623ab59e17a593afaad0fa8239ae", "482": "7efe1be2ea325825cd55a7b17a0f0caccb773ca2", "487": "3033e07d6238822d258931ac5af152e64847db1e", "493": "fba86f1a02e0cdf63c6b76355320aaa8caf8cb2d", "494": "581b3c540ad1a09c317c537a854b34f137275b05", "495": "9d0867635fcedee1755d36234024a985c4544779", "498": "61bd16738c0e0807cd2739a354a690d75177646e", "501": "6b2cebc43575dcb003cbce92162008453d14b257", "502": "f56440174500685c71372b63c2a014b9e61e9f7f", "504": "89ce32d1fdc9ab0465c06c04e44a170828556a7d", "511": "578e3d077faabd7e55e6fe622e00ba3a9277f165", "516": "7b38e91fb7bbae506f1a3b7db913e51b7779bbfa", "520": "81ed6b68a532b5bb0fe0a41318fa63df6f9c8fc3", "521": "a452fd6ef212bfdfae8cb619de195331b7b0a85f", "526": "a54667f18361089b771fa7c6764dbe0997e9325b", "528": "97d9ca680df34338b6db8c8b9e69d678abbb873f", "533": "e9cd61159643445bb523a3786a82dce2bab06a8a", "534": "80b009bda0df644b0e2c6746ee4561fbf8d5aafc", "535": "745e20caa37b23ceffe7b8c74f7f4e5d0cd1ff5b", "546": "fa2118b7909565e6c04d747380be000a450e7b79", "547": "7104eb18ba0a91674eadc10fcb483c46dbf4fcb7", "548": "7121cf6742f5cd19cfe89a23403648943f4c42c5", "554": "88bd22634d9af9484fa712bac6557904e06df19a", "561": "c13a73315ea997cd8335af591f911dc7d659bff7", "564": "d218ef05cbb38d00da250c3d033bf4270ae9de41", "569": "18536db276f508266eaae7004ee8c49728f3121f", "576": "3aec1af47e9e859ddd73362928a486c8985dc023", "577": "a5b5410b71193de00c9bb59c54ccbcb5608e2f4e", "583": "fbb4386e647f36877ff0f63524c0f6dc8d2eb41e", "584": "4346409801e0f1f99dfe05a7aa136abf93eb7fe4", "585": "1cd7636399856a800931361fb4c5c8303c724e4c", "590": "9ea64af4e7da47bdfb9b4c25863babd6a0c5786d", "593": "610cefbb37ea15fd7736e62af969eea46f2e69a2", "594": "291c03ca7b9370777370ee949be4513a82a05026", "597": "97f783f95f0c27deecee3071f79bac22b1d8f4bf", "606": "9a932e9840b7365c4f8a70186529306a80747f09", "607": "721922d152c620fbef38b6e6aed8b20685a53a15", "608": "69c6e83d5822a72989c6db68a677c3873c3c5091", "609": "e22f83c0f97f7057a8ac18d4c7a53323c9f1e40a", "614": "817d06f8992f332551e3a87218d768e12f35a0af", "618": "5ab23f322bc75bd57987882788da55dcc789c610", "621": "cf87e0911af84bb3f70dc42fc088328b0cd351c5", "622": "ca72300bfcd2586b5afc8e00f67cce4285f97a25", "647": "6eaa1ca4f129f48acbfabb7b526a61b29f9c354d", "656": "80b2b6e0019ac944680011bf31c250bb06c8bc95", "660": "080d28cf92ad5ebd510a9fafa48aec6fa4a086f5", "668": "1f3a6d907ae386d5b140d5fc6049990fad5532c3", "671": "0386b25787f2c80791347cc3978ee7fca4851de8", "679": "02815e68bf2b1bd478bda1f220e6efaca87df13e", "681": "101e87b924f6693e0c20ce9d82b1eaab1792cf91", "685": "444da419842295b0967e83dd8b908ece5da42cd5", "690": "89eea47098f060a97277219391571c7f2efdf6cd", "695": "b3ee75b35b9ee1701acf8821c5942df70a696f3d", "698": "f56f9b6bf4f1ca2dfe5b833a5f28a8f8769f5842", "703": "8fda4559ce24e7832a8e6ba340cc92121bd5e5be", "709": "bf2f6365f02b2bc3402676071efa52f81425dff4", "710": "6c03019d567cc4d7ef6fb2c9eb8893a785cf9f22", "712": "ac054f5704981387f60133f62d400036f8d8b760", "722": "3f1e3e96dc19592f038331d3798faa6516b16df6", "734": "dfcba127defb4aef46a6f8f05e6eec1e7b6bc6d6", "737": "6d560166df2845d00dedb9be73c5c817efc535f5", "740": "773eb55a9a83d9a6bd7a08038c7d1e041cee27fb", "744": "0b6dc949f3ee6f562f67c34fc13649c93ba985ef", "751": "9575f9a93d540242a29599c32cc83f4dfb94dbe3", "753": "1e5a2e335137531f7eda541e5b15177c08bb60a1", "755": "d1358e1c1da6735658dca71b258950a054724c8e", "757": "4d9430b54cdd832d1d90726fb58fd17d012d58cf", "758": "4518d71dc62da0089ac65a4ec905b0f632927ed5", "768": "29a0ffdcae6d9200c35e430f4fabb18ba9357f0c", "770": "75821b6d9b12f22101deea2362a003c48328cf79", "774": "5118bf220724ca719e47751d2d2ce27ac6dcfe01", "777": "c301b231eabda3895e06951942f6890f3264b52b", "778": "42ed2bd5c8f8a88dd01c8156a2ebca05983fb4e8", "790": "da61915cfd3ce87c5a30b93faf140870310d9290", "792": "20226c4dec27d9a513f6bd579606987b675b054a", "797": "5b8fb82bc127a3428b59e0db1b6a9a917fd28db4", "803": "ce74447d20fc2db45e810a893689b70189747b23", "806": "2dfdc1d7d6a514447a5e8ef25b90a020e5e57fe7", "812": "f3a49821dafc6050af75b00eb9d03d27f230342a", "813": "1521b971e2060110c769cea30579e605191c65de", "819": "3c6d31460a7cd830a830e2ca759732018bbd8ca8", "827": "2ab05414146d9b09679a8ce727cee54113c737fd", "829": "efe4c8bcfd7ec59e87fb2de537571baac7f11b4d", "831": "2e0de4b8385f8827675bd6146a7237981d177752", "833": "622266dbfaad901838a13d7b90603626dbec3df1", "839": "ffdb32e4f626dc18ec2cfebf52db418f28ce6f73", "844": "420c26b02859858ec7b97979d60b4d1709324252", "849": "14d366fd07f942f22f54425198a3b94487864502", "854": "686bcd3f9cc2d099dbd88666efc0f23001a7c01f", "863": "6529f88656ee81d63735368fc640d40544e41979", "866": "421cc8e6b304d78e71532c50873c511e78319a7a", "871": "707bec71d832c642f43dfd176e5945b50e323c53", "873": "fa6e2953d413ba81171e005608fb39fc951317ba", "876": "654b5a51f870d7d06e286eb0350d573a199128e2", "882": "4e6f058555e34b82d57189ffbcbbb167a3fee208", "883": "90a15a87765ba219470bde0644fa705c5ac0bd96", "885": "ccee51f021a1e6f1cad8a94550b50a50f3aad94b", "888": "438aeb6f9a77ab8fc83d5c53f5881fbdeb4304cb", "895": "59529362c20e681ab9d390f715b4ebed3dc2aa77", "897": "cdc57ce2131cf42a5f8701ce9967d6a9f4bae7e8", "901": "e647f42f4a480471e5993f35a9bc488cfbfe9077", "903": "6405154184f7023328d169ec89139a3fdc7210d3", "908": "530f1746f777c4eeb100eeb6887b17b4b8d5e42e", "909": "435ac87bf86976dd72d477b1718563e6518665b2", "910": "2457ff0622fddcd38c6b301e720c3e25db1f8ecb", "914": "16562ceb8d1dc654cb1c4ae55b2d5bf7270ae66f", "919": "1e0cc4b57aa16281b6d2cffa8a038ba3c60f8c08", "923": "3a8163f58e972ea716ce514e6e7474f870bf89fa", "925": "1a9f20704c7015ad0199dc3b10fc02509e30582a", "933": "b2aa7ede82908a1c37875660bd09d81c54085fe5", "937": "ef2baacd93230ad6ab265aefb3880572f9b28e8f", "938": "6164eb056d23d5f4044acbe01ca76d037def0482", "942": "efc676de6b249c933527c06000c4c36321688853", "945": "60d2a446d1f9eb1b9b874371caa44659b1516542", "947": "3d6feec9d2a4df61bae50f8e75ad2008168a210a", "950": "35ca3ab8310ccabc0242cc4cd605a0cbd9cad006", "956": "c8ed8cf7d91db5fe266ead74b505b17fe55c2dfe", "958": "daf4f5cf9b4a01c271d22d57a66acd198df62dec", "961": "46297b0536a790f187daa1618a9084c1826a06bc", "963": "6c267da8c7b9b9438a15c566aa27b072e6b57ba0", "973": "4787c104a83dc4789ba39b6d4ad2c9d87487a618", "977": "aa910b47a76fdd9230de29a4ee6c9f1fa5d21a2c", "979": "c8f656cc13a9a367f495a6e1a78a49ea2b875aa7", "983": "7fb5ef7234f74bd769a943d4f4ec9a81e43ab746", "986": "77d01acbe65e6f97dcf0363c6f4a840848f7494e", "992": "3e87179295e1acb0c77217cb0a46006efb63604f", "995": "0123ad9c806c2d25e53e8f482bb756dc062f4e3f", "1002": "f4fb8094610c06f81821f2570b5fdc955ef11172", "1003": "7269abc53c7e639de80ffe704dea270b77018dfb", "1004": "fabd3fbeb117f6e9ab023de536370c47fd6719ab", "1009": "b41ef5208cba4a1dad34e94f24594fb4ab823363", "1011": "49600a6d9e021a97c9d6e8ac591cf71c13e1175b", "1013": "a64137e24a51ec0e9bb2c56a79547f966e976300", "1014": "023a5dad96d48fe6336c1a9d72afed4bbfbeb312", "1018": "46f3b86e9b124c071ff852c847eef9a259ed917a", "1021": "a895e6a7a0b3fe32fe7722dbb9cae1783e70267c", "1022": "be08973766ef31d8d3e1321e8d9c3c637d77b897", "1024": "82ba0705d23113f265c1518f5ebd2e6cef56ea7c", "1028": "251a8705641fe53431d018a167b7742d1a5339a1", "1031": "2790f79b957727f9450f263804b15497e316abb9", "1035": "3b179c50ab0ed2d97efcd27a097dd5a607dd53e8", "1037": "8c469f9ebd0bc94a2cb737cb6f880ff5fe3c9d09", "1039": "c7741a8ba4754f7c8e81a332a154cf37afd193ff", "1042": "26100314e0c62b3c99ae6d93a4ae1adbfd32a449", "1046": "eabc9c18256cadb0f57bf649fb874f59a113a359", "1047": "6b839b9a2be4706634b52d69e35ebfbedd155088"}, "revision_to_date": {"0": 1715104817000, "1": 1715105049000, "2": 1715105454000, "3": 1718729960000, "4": 1718730039000, "12": 1718987748000, "15": 1719001110000, "20": 1719519223000, "23": 1719521019000, "27": 1719595400000, "45": 1720537594000, "49": 1720545235000, "52": 1720559433000, "55": 1720563367000, "56": 1720613306000, "59": 1720634877000, "69": 1720790465000, "72": 1720791860000, "73": 1720793083000, "77": 1720799351000, "81": 1720810352000, "83": 1720816396000, "94": 1721048284000, "101": 1721069133000, "104": 1721074112000, "108": 1721145656000, "115": 1721227247000, "119": 1721232141000, "121": 1721237761000, "127": 1721314823000, "133": 1721322428000, "134": 1721332976000, "136": 1721341187000, "142": 1721674684000, "144": 1721747844000, "153": 1721831703000, "154": 1721842751000, "163": 1722019354000, "167": 1722270316000, "176": 1722370199000, "188": 1722865901000, "192": 1722872119000, "193": 1722872133000, "199": 1722884477000, "206": 1723055013000, "211": 1723131039000, "214": 1723145997000, "217": 1723490365000, "222": 1723563503000, "226": 1723649585000, "230": 1723727864000, "240": 1724431520000, "245": 1724434552000, "248": 1724435394000, "250": 1724436352000, "257": 1724702698000, "274": 1724768943000, "279": 1724791378000, "284": 1724854646000, "285": 1724855824000, "289": 1724857942000, "293": 1724870422000, "294": 1724873083000, "300": 1724876141000, "303": 1724876872000, "304": 1724877195000, "307": 1724954752000, "315": 1725034858000, "321": 1725112756000, "328": 1725374667000, "329": 1725376059000, "332": 1725390113000, "338": 1725465514000, "348": 1725568025000, "356": 1725649068000, "358": 1725887713000, "366": 1725976569000, "369": 1725981820000, "371": 1726084856000, "376": 1726262218000, "389": 1726497484000, "392": 1726505317000, "399": 1726673453000, "402": 1726685874000, "403": 1726686271000, "405": 1726775856000, "408": 1727121993000, "421": 1727191670000, "422": 1727191686000, "423": 1727205323000, "429": 1727273158000, "431": 1727276553000, "438": 1727362832000, "447": 1727444042000, "453": 1727459455000, "458": 1727467151000, "460": 1727706752000, "463": 1727726132000, "466": 1727787795000, "467": 1727790930000, "470": 1727797499000, "474": 1727815269000, "479": 1727894920000, "482": 1727959032000, "487": 1728312325000, "493": 1728324929000, "494": 1728392437000, "495": 1728392512000, "498": 1728407191000, "501": 1728494355000, "502": 1728501921000, "504": 1728575746000, "511": 1728917431000, "516": 1728997713000, "520": 1729009230000, "521": 1729012143000, "526": 1729023224000, "528": 1729027028000, "533": 1729081509000, "534": 1729081522000, "535": 1729083673000, "546": 1729264175000, "547": 1729268216000, "548": 1729269585000, "554": 1729888358000, "561": 1730127258000, "564": 1730128044000, "569": 1730229976000, "576": 1730385716000, "577": 1730388286000, "583": 1730821028000, "584": 1730905640000, "585": 1731000910000, "590": 1731017987000, "593": 1731416517000, "594": 1731954777000, "597": 1732297195000, "606": 1733146111000, "607": 1733146341000, "608": 1733146364000, "609": 1733146383000, "614": 1733245831000, "618": 1733318015000, "621": 1734720939000, "622": 1734721099000, "647": 1735831194000, "656": 1735835160000, "660": 1735841891000, "668": 1735854100000, "671": 1735913549000, "679": 1735929107000, "681": 1736186823000, "685": 1736264267000, "690": 1736267963000, "695": 1736353718000, "698": 1736355622000, "703": 1737148303000, "709": 1737554847000, "710": 1737563023000, "712": 1737643656000, "722": 1737747209000, "734": 1737986103000, "737": 1737986513000, "740": 1737991747000, "744": 1737994951000, "751": 1738101670000, "753": 1738166759000, "755": 1738514214000, "757": 1738615192000, "758": 1738616147000, "768": 1739391531000, "770": 1739457686000, "774": 1739468878000, "777": 1739547897000, "778": 1739548094000, "790": 1739812286000, "792": 1739820561000, "797": 1739827465000, "803": 1739909166000, "806": 1740161199000, "812": 1740413300000, "813": 1740413758000, "819": 1740428543000, "827": 1740600918000, "829": 1740680483000, "831": 1740706479000, "833": 1740771852000, "839": 1740772842000, "844": 1740779697000, "849": 1740854278000, "854": 1740950053000, "863": 1741035157000, "866": 1741096445000, "871": 1741208450000, "873": 1741284044000, "876": 1741294158000, "882": 1741316040000, "883": 1741350301000, "885": 1742219186000, "888": 1742314089000, "895": 1742473419000, "897": 1742827558000, "901": 1742931025000, "903": 1742934796000, "908": 1744120446000, "909": 1744123392000, "910": 1744208602000, "914": 1744312743000, "919": 1744387238000, "923": 1744387722000, "925": 1744393511000, "933": 1744664385000, "937": 1744740374000, "938": 1744751934000, "942": 1744752489000, "945": 1744811964000, "947": 1744815396000, "950": 1746733271000, "956": 1747159319000, "958": 1747425503000, "961": 1747770792000, "963": 1748865650000, "973": 1749144725000, "977": 1749153365000, "979": 1749212188000, "983": 1749498041000, "986": 1749662532000, "992": 1749674559000, "995": 1749817998000, "1002": 1749835631000, "1003": 1749836060000, "1004": 1749842269000, "1009": 1750096865000, "1011": 1750106833000, "1013": 1750109532000, "1014": 1750162126000, "1018": 1750179615000, "1021": 1750181424000, "1022": 1750191284000, "1024": 1750295412000, "1028": 1750790992000, "1031": 1750794968000, "1035": 1750874125000, "1037": 1751035704000, "1039": 1751051194000, "1042": 1751206148000, "1046": 1751420725000, "1047": 1751420762000}, "params": {"machine": ["gh-runner"], "python": ["3.10", "3.11"], "Cython": [""], "build": [""], "packaging": [""], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "gh-runner", "python": "3.11", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}], "benchmarks": {"benchmarks.TimeSuite.time_apply_passbands": {"code": "class TimeSuite:\n    def time_apply_passbands(self):\n        \"\"\"Time applying the (already loaded) passbands to flux.\"\"\"\n        _ = self.passbands.fluxes_to_bandfluxes(self.fluxes)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_apply_passbands", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "45223f368ec475765837653e76e05b372a81eda4226e02475d4b158ecb2de257", "warmup_time": -1}, "benchmarks.TimeSuite.time_apply_white_noise": {"code": "class TimeSuite:\n    def time_apply_white_noise(self):\n        \"\"\"Time the application of white noise to a sample.\"\"\"\n        _ = self.white_noise.apply(self.fluxes, white_noise_sigma=0.1)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_apply_white_noise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a6995db098074f873fabbb596ce5669f4d3dcd30cece21dcac253fb37030a868", "warmup_time": -1}, "benchmarks.TimeSuite.time_chained_evaluate": {"code": "class TimeSuite:\n    def time_chained_evaluate(self):\n        \"\"\"Time the generation of random numbers with an numpy generation node.\"\"\"\n    \n        def _add_func(a, b):\n            return a + b\n    \n        # Generate a starting mean and scale from uniform distributions. Use those to\n        # generate a sample from the normal distribution. Then shift that sample by -5.0.\n        loc_node = NumpyRandomFunc(\"uniform\", low=10.0, high=20.0)\n        scale_node = NumpyRandomFunc(\"uniform\", low=0.5, high=1.0)\n        norm_node = NumpyRandomFunc(\"normal\", loc=loc_node, scale=scale_node)\n        val_node = FunctionNode(_add_func, a=norm_node, b=-5.0)\n    \n        # Generate 100,000 samples.\n        _ = val_node.sample_parameters(num_samples=100_000)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_chained_evaluate", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ffeec86b5afeff833f77437ee254e6f1282688647c4543cedabfae027f840bc0", "warmup_time": -1}, "benchmarks.TimeSuite.time_evaluate_salt3_model": {"code": "class TimeSuite:\n    def time_evaluate_salt3_model(self):\n        \"\"\"Time querying a predefined salt3 model.\"\"\"\n        _ = self.salt3_model.evaluate(\n            self.times,\n            self.wavelengths,\n            graph_state=self.graph_state,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_evaluate_salt3_model", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a3d12a79138f69da17554800e2cd6b82a83aaf26c02fc490172d3ca49553c295", "warmup_time": -1}, "benchmarks.TimeSuite.time_evaluate_salt3_passbands": {"code": "class TimeSuite:\n    def time_evaluate_salt3_passbands(self):\n        \"\"\"Time evaluate the SALT3 model at the passband level.\"\"\"\n        _ = self.salt3_model.get_band_fluxes(\n            self.passbands,\n            self.times,\n            self.filters,\n            self.graph_state,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_evaluate_salt3_passbands", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2b9eb8e1257ceac55367735cd155f33c8233fdedd48cba68333a378e12e641b6", "warmup_time": -1}, "benchmarks.TimeSuite.time_evaluate_simple_linear_wavelength_source": {"code": "class TimeSuite:\n    def time_evaluate_simple_linear_wavelength_source(self):\n        \"\"\"Time evaluating a simple LinearWavelengthSource.\"\"\"\n        _ = self.linear_source.evaluate(self.times, self.wavelengths)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_evaluate_simple_linear_wavelength_source", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cb03c2216c91c611f26f225654c6814de1f4fd6f8218bcf14c3bfb88e42dd828", "warmup_time": -1}, "benchmarks.TimeSuite.time_fnu_to_flam": {"code": "class TimeSuite:\n    def time_fnu_to_flam(self):\n        \"\"\"Time the fnu_to_flam function.\"\"\"\n        _ = fnu_to_flam(\n            self.fluxes,\n            self.wavelengths,\n            wave_unit=u.AA,\n            flam_unit=u.erg / u.second / u.cm**2 / u.AA,\n            fnu_unit=u.nJy,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_fnu_to_flam", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c76579b1b49673cd4fb49839025a865b178863d370877232433cd0552534a403", "warmup_time": -1}, "benchmarks.TimeSuite.time_lightcurve_source": {"code": "class TimeSuite:\n    def time_lightcurve_source(self):\n        \"\"\"Time the creation and query of a LightcurveSource.\"\"\"\n        lc_times = np.linspace(0.0, 6 * np.pi, 100)\n        g_gluxes = np.sin(lc_times) + 3.0\n        r_gluxes = np.cos(lc_times) + 5.0\n    \n        lightcurves = {\n            \"g\": np.column_stack((lc_times, g_gluxes)),\n            \"r\": np.column_stack((lc_times, r_gluxes)),\n        }\n        lc_source = LightcurveSource(\n            lightcurves,\n            self.passbands,\n            lc_t0=0.0,\n            periodic=True,\n            baseline=None,\n            t0=0.0,\n        )\n    \n        # Sample the lightcurve source to ensure it works.\n        _ = lc_source.evaluate(self.times, self.wavelengths)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_lightcurve_source", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cecccd72c05f389a612cc8ca01c7c8f6975ab0df5d505a7be9c026ad5514f3ef", "warmup_time": -1}, "benchmarks.TimeSuite.time_load_passbands": {"code": "class TimeSuite:\n    def time_load_passbands(self):\n        \"\"\"Time loading the passbands from files.\"\"\"\n        _ = _load_test_passbands()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_load_passbands", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c17cc83f9bce8c4818297b6ff1e23116ab684285946b2cbafc27f04f1e535482", "warmup_time": -1}, "benchmarks.TimeSuite.time_make_and_evaluate_step_source": {"code": "class TimeSuite:\n    def time_make_and_evaluate_step_source(self):\n        \"\"\"Time creating and evaluating a StepSource.\"\"\"\n        model = StepSource(brightness=100.0, t0=2.0, t1=5.0)\n        state = model.sample_parameters()\n        times = np.arange(0.0, 10.0, 0.05)\n        wavelengths = np.arange(1000.0, 2000.0, 5.0)\n        _ = model.evaluate(times, wavelengths, state)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_make_and_evaluate_step_source", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4da228a3ca80d938c7c941651e4da5e7ebfffc1f1473459615eb0cce2651205f", "warmup_time": -1}, "benchmarks.TimeSuite.time_make_new_salt3_model": {"code": "class TimeSuite:\n    def time_make_new_salt3_model(self):\n        \"\"\"Time creating a new SALT3 model.\"\"\"\n        _ = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_make_new_salt3_model", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "8bf14982ac72dd15511fe96fc3f579c0db53ec3aa5a753f8b98ca5a8ebc2c694", "warmup_time": -1}, "benchmarks.TimeSuite.time_make_simple_linear_wavelength_source": {"code": "class TimeSuite:\n    def time_make_simple_linear_wavelength_source(self):\n        \"\"\"Time creating a simple LinearWavelengthSource.\"\"\"\n        _ = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_make_simple_linear_wavelength_source", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "93bb937ea52524f78a34dea88772ed62daaf195fed67de939ed4936bef7b6e1b", "warmup_time": -1}, "benchmarks.TimeSuite.time_make_x1_from_hostmass": {"code": "class TimeSuite:\n    def time_make_x1_from_hostmass(self):\n        \"\"\"Time the creation of the X1 function.\"\"\"\n        _ = HostmassX1Func(self.hostmass)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_make_x1_from_hostmass", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6142439630c0c164dea584019721a6dbd536834d2a5e09f4151aab44c5bd5615", "warmup_time": -1}, "benchmarks.TimeSuite.time_sample_x0_from_distmod": {"code": "class TimeSuite:\n    def time_sample_x0_from_distmod(self):\n        \"\"\"Time the computation of the X0 function.\"\"\"\n        _ = self.x0_func.sample_parameters()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_sample_x0_from_distmod", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "8e2ad8ce53fbf23e119f367a93ff4d5eac49cb56e34f609e4ca6fd1339916496", "warmup_time": -1}, "benchmarks.TimeSuite.time_sample_x1_from_hostmass": {"code": "class TimeSuite:\n    def time_sample_x1_from_hostmass(self):\n        \"\"\"Time the computation of the X1 function.\"\"\"\n        _ = self.x1_func.sample_parameters()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_sample_x1_from_hostmass", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "593b100fbb3f24ccc25a72e99aa0bb1545bd49bd897dd847f985d23759beb7ee", "warmup_time": -1}}, "machines": {"gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {"v0.0.1": 709, "v0.0.2": 947}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}