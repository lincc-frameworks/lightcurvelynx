{"project": "tdastro", "project_url": "https://github.com/lincc-frameworks/tdastro", "show_commit_url": "https://github.com/lincc-frameworks/tdastro/commit/", "hash_length": 8, "revision_to_hash": {"0": "98eb15f5c411d9a136d18b0ae5ec9df14e2f6287", "1": "30225d1b54431d19dcfe9552898df5366d798b66", "2": "678d58e603bac97e57e5c20344d46af7acaa6c33", "3": "7519ef02db3e46d29645eb024787c4780fd90e49", "4": "7bef979448ce46b5f1dcbf448f0aea941b69aeb9", "12": "3c83d1c92e7876354587e153fd6c51690cb7670b", "15": "939017a041aba63d4c1c58482442e764c79c44d1", "20": "a0462763b4e9ed6ffc8103e7b8bea746b4ae4b35", "23": "5b0a26f3a91226a095a430b47ebd8ce1ea7a2306", "27": "072c8858689e910947d32207882af6a35e7295f1", "45": "0c31e23bbc9ff156236432b7d37ca2d8429a692e", "49": "6c5f5834a43b53e27991fe8ddb0dfffbff96216a", "52": "aafcfe8f6a632ac01b1e70cc067f8c35dabbc9d7", "55": "ea30c944a7dc805fa4ab00a573cc07d5022473e5", "56": "c49b8e1208d42f6f1b30eb1bed36f98a213fd85c", "59": "01463ec2090d7a38975ec8a391f01270d519a575", "69": "40d83aa2a9294b38ee7e889d6dbe8178e44df7c8", "72": "9b287e05eb1e6d0ac9d3b11b06a4e34243592f17", "73": "eee128a6f6967a5b949582a900964648aad899fc", "77": "2bc1e09400c9c39bca72e4217c417cccf9ebeaca", "81": "da499449d7f7ae63485074401eabde47259a9c9b", "83": "ac94f790ad4e7416910d75e827a4ec5dd05eff8c", "94": "a39ced8f6f38089a38a45bc432069a407917f3aa", "101": "ac84552d6e8b12206e5ee83e8b2a5e88dcf78702", "104": "a79245922596fa1539aebb3634519c13f3fef796", "108": "8de94c58cda2139f6291c3f0f0c364030e66eb69", "115": "a94c158cd184059d704662d5592518cf23acf98a", "119": "df3e2a5bc053bea1ed8b596ee712d1874ec6bb15", "121": "80a204ee22d3ee1d759a12a4a3d0c7d9b0fc1a3d", "127": "e55b4d667fce3df3e042a015df89ee1ed5f74f99", "133": "942387df50f78dbb9ab5b0cc2e866fbb0d96bd7a", "134": "37a164458eaf54ef7d7de2e79cec4462667952ac", "136": "05e93a75cd3d01692adf83115daaa1829e22d0cc", "142": "2db4ea18398a19e5904659e69a2530f9211dac20", "144": "74cbb16b925b4b3c89bfb700d965f187a0f38579", "153": "fcd801268f2351158ba5e7ef54603e1f361a8fe5", "154": "1cf3edf6564d563310352299cb0d8a392f5c0461", "163": "dd566572f92fc5948273e34026ab95b6763c9f55", "167": "3857404946a3208a178c0158744958ab7ef6748d", "176": "c8d238a3768be764d88089078f7d5187bcc7eb09", "188": "266a5d33e226b91c991c1fa1476262bc94fd1f33", "192": "23e018626f5b85bed2346702beed12c92f7d2315", "193": "bffc5561a7378a475bdc5fb04a8797267d03e5af", "199": "103914e563b015c63f69535fb1128fc3cb84a2b2", "206": "8145ab9d42a578be1e24116f5c84edddc20cc3bc", "211": "6b3eee6373e8c50cf9aaba1878eff67db4a0e77c", "214": "d3acd6a6d5a6c08bfcd8c95df57660d5b5cf2a06", "217": "b114bef2f1b68ef8468ac2ca21abc43800e4f0e1", "222": "fdd721aa2605ee79c350ed13b117ef979c2c8b38", "226": "2dbd8b563f9a0cb5aa2732ab2f6864e7e6f4134c", "230": "de4a0614f19330ffc04c2f22959d1dbb9d3e62d2", "240": "e11ae739a1d6f220fbe09e516c3a7309a011894c", "245": "95cd0c9dbc71d0aa26456f7e1de678b3bd7306df", "248": "1a1d3706bda96a96a616cc839c53c2d05ce25e5f", "250": "60af46f25e896a2eb873ee6f252990cbbba8b540", "257": "117f7399482dcb920fb6b9822e4ca4c3d0034f47", "274": "a5f725d28e33a61a386bc8a9bab9f592fae09710", "279": "a5acdab2a74804d32c043ab4ba334d3d01bb3222", "284": "0bcc333993d6f1794893666d7f264f571fa8598b", "285": "cf6fae8192c3ccd88d872eb684602a8df25d7034", "289": "24474dc1fcf9936eb2b9a0c373cc8259bf843073", "293": "7a7b08ac346160e0507d2d5cf761aa9fc910746b", "294": "25de82cc6b08b306dfca6e78be42d994a49e0947", "300": "9ee112e9fe652dcb99168b98bdfb4d2e22c9a115", "303": "8a9444bfe2464e3cf6c7a3e2fea30b1976447551", "304": "aa81e3f282f3738f045de593dde3be79a1b5cf01", "307": "4a87261cff013be89f0e5c4a036cb36b3afd9178", "315": "9fcdf6dd2cbaec98eb42696876a3b057a6f8422f", "321": "6cbbbfa3779751414208a4b9ce1e6a88855f80d5", "328": "da0c370dae56e09f8e987fd61cae0ebb69755412", "329": "96494ce286d9c456225331e47f8598546aeeca32", "332": "0c25e49a24b27b83292808889cf1d81bb4d5a24f", "338": "91f974fa983ea52cc4e436d0107ee2880ae3bda9", "348": "1b2bc95cf15887619499ea06f0865ddb90ee1253", "356": "c3ff90fc5b0a8dadd7b998741d113741c301a5b3", "358": "a8470898e73d0a380ede24cfb40222684e7686c5", "366": "088ddc10364ac68d61eb36437cd8aa36112fe9ef", "369": "21311734e771e20fe0558c293a2cf7bf3bcc8d85", "371": "079e2e0fca5f873a101fe378bf7f88f96670c6c6", "376": "c7ecfa54cb13160d8e63a32bf15c24c974afdc51", "389": "2fb1c0f38b7d9475f1858f2718702e53ed794ba9", "392": "fba3f997d91aa5c1a838cdfbe178e0b20812c487", "399": "e7337765db2ca3f11bb6c67e6751b1cb86c797d8", "402": "412ced732b99ff4bdffcf8b346e5287e43192a54", "403": "91286c15c6e34bede1ab5e51dbaf8fe876ab37a3", "405": "2064a70dbe829a8f13ae8838f28e36ede867a5b1", "408": "f05b611ccc2dac9da1af2032b49fa4a645cfe607", "421": "27c8c7eaecd92d90c212652dd3d381428fd6c1d4", "422": "9ca5fb00414ff50778506665dc1054cbf503947d", "423": "cd62e4adcd577befcde5315dea60a9df7f9db849", "429": "e780a10ee4aa3fcf294a726fc069e55c376a146f", "431": "dc9c6b50158211217f64b5c56fa381e1f42ddba5", "438": "bcd50785bc63527bc8769a51f4eff17e0701f051", "447": "ad925bcf0c4aae8ea0305f6442b77e4983577b69", "453": "7450fccec5d30c5737d2d21772ac8d7421315c12", "458": "b3dc46ead1aa36ff160e840fcbb853942c479b52", "460": "38526eea5b8065c41e9d8f88d7323db59ebb2a7f", "463": "461eda2f69c72077eaef0a05ce95c1a98b8e699e", "466": "cfd84e0fca1148017ef6bfd4375402cfd1b19717", "467": "ffad7c494baa21c9fcf75682dfd46002ffa2b553", "470": "4a0ba5f40fcbeb99dccc8e94fa8c2cddb946ccc5", "474": "215228d18fd94ab53d6e4e99465e593133e12a95", "479": "dd22ca248b30623ab59e17a593afaad0fa8239ae", "482": "7efe1be2ea325825cd55a7b17a0f0caccb773ca2", "487": "3033e07d6238822d258931ac5af152e64847db1e", "493": "fba86f1a02e0cdf63c6b76355320aaa8caf8cb2d", "494": "581b3c540ad1a09c317c537a854b34f137275b05", "495": "9d0867635fcedee1755d36234024a985c4544779", "498": "61bd16738c0e0807cd2739a354a690d75177646e", "501": "6b2cebc43575dcb003cbce92162008453d14b257", "502": "f56440174500685c71372b63c2a014b9e61e9f7f", "504": "89ce32d1fdc9ab0465c06c04e44a170828556a7d", "511": "578e3d077faabd7e55e6fe622e00ba3a9277f165", "516": "7b38e91fb7bbae506f1a3b7db913e51b7779bbfa", "520": "81ed6b68a532b5bb0fe0a41318fa63df6f9c8fc3", "521": "a452fd6ef212bfdfae8cb619de195331b7b0a85f", "526": "a54667f18361089b771fa7c6764dbe0997e9325b", "528": "97d9ca680df34338b6db8c8b9e69d678abbb873f", "533": "e9cd61159643445bb523a3786a82dce2bab06a8a", "534": "80b009bda0df644b0e2c6746ee4561fbf8d5aafc", "535": "745e20caa37b23ceffe7b8c74f7f4e5d0cd1ff5b", "546": "fa2118b7909565e6c04d747380be000a450e7b79", "547": "7104eb18ba0a91674eadc10fcb483c46dbf4fcb7", "549": "7121cf6742f5cd19cfe89a23403648943f4c42c5"}, "revision_to_date": {"0": 1715104817000, "1": 1715105049000, "2": 1715105454000, "3": 1718729960000, "4": 1718730039000, "12": 1718987748000, "15": 1719001110000, "20": 1719519223000, "23": 1719521019000, "27": 1719595400000, "45": 1720537594000, "49": 1720545235000, "52": 1720559433000, "55": 1720563367000, "56": 1720613306000, "59": 1720634877000, "69": 1720790465000, "72": 1720791860000, "73": 1720793083000, "77": 1720799351000, "81": 1720810352000, "83": 1720816396000, "94": 1721048284000, "101": 1721069133000, "104": 1721074112000, "108": 1721145656000, "115": 1721227247000, "119": 1721232141000, "121": 1721237761000, "127": 1721314823000, "133": 1721322428000, "134": 1721332976000, "136": 1721341187000, "142": 1721674684000, "144": 1721747844000, "153": 1721831703000, "154": 1721842751000, "163": 1722019354000, "167": 1722270316000, "176": 1722370199000, "188": 1722865901000, "192": 1722872119000, "193": 1722872133000, "199": 1722884477000, "206": 1723055013000, "211": 1723131039000, "214": 1723145997000, "217": 1723490365000, "222": 1723563503000, "226": 1723649585000, "230": 1723727864000, "240": 1724431520000, "245": 1724434552000, "248": 1724435394000, "250": 1724436352000, "257": 1724702698000, "274": 1724768943000, "279": 1724791378000, "284": 1724854646000, "285": 1724855824000, "289": 1724857942000, "293": 1724870422000, "294": 1724873083000, "300": 1724876141000, "303": 1724876872000, "304": 1724877195000, "307": 1724954752000, "315": 1725034858000, "321": 1725112756000, "328": 1725374667000, "329": 1725376059000, "332": 1725390113000, "338": 1725465514000, "348": 1725568025000, "356": 1725649068000, "358": 1725887713000, "366": 1725976569000, "369": 1725981820000, "371": 1726084856000, "376": 1726262218000, "389": 1726497484000, "392": 1726505317000, "399": 1726673453000, "402": 1726685874000, "403": 1726686271000, "405": 1726775856000, "408": 1727121993000, "421": 1727191670000, "422": 1727191686000, "423": 1727205323000, "429": 1727273158000, "431": 1727276553000, "438": 1727362832000, "447": 1727444042000, "453": 1727459455000, "458": 1727467151000, "460": 1727706752000, "463": 1727726132000, "466": 1727787795000, "467": 1727790930000, "470": 1727797499000, "474": 1727815269000, "479": 1727894920000, "482": 1727959032000, "487": 1728312325000, "493": 1728324929000, "494": 1728392437000, "495": 1728392512000, "498": 1728407191000, "501": 1728494355000, "502": 1728501921000, "504": 1728575746000, "511": 1728917431000, "516": 1728997713000, "520": 1729009230000, "521": 1729012143000, "526": 1729023224000, "528": 1729027028000, "533": 1729081509000, "534": 1729081522000, "535": 1729083673000, "546": 1729264175000, "547": 1729268216000, "549": 1729269585000}, "params": {"machine": ["gh-runner"], "python": ["3.10"], "Cython": [""], "build": [""], "packaging": [""], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "gh-runner", "python": "3.10", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}], "benchmarks": {"benchmarks.TimeSuite.time_apply_passbands": {"code": "class TimeSuite:\n    def time_apply_passbands(self):\n        \"\"\"Time applying the (already loaded) passbands to flux.\"\"\"\n        _ = self.passbands.fluxes_to_bandfluxes(self.fluxes)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_apply_passbands", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0cff8deaa503247c6e01aa8a2a73df26174a91e2b9a030472508b28d22a5d5ba", "warmup_time": -1}, "benchmarks.TimeSuite.time_chained_evaluate": {"code": "class TimeSuite:\n    def time_chained_evaluate(self):\n        \"\"\"Time the generation of random numbers with an numpy generation node.\"\"\"\n    \n        def _add_func(a, b):\n            return a + b\n    \n        # Generate a starting mean and scale from uniform distributions. Use those to\n        # generate a sample from the normal distribution. Then shift that sample by -5.0.\n        loc_node = NumpyRandomFunc(\"uniform\", low=10.0, high=20.0)\n        scale_node = NumpyRandomFunc(\"uniform\", low=0.5, high=1.0)\n        norm_node = NumpyRandomFunc(\"normal\", loc=loc_node, scale=scale_node)\n        val_node = FunctionNode(_add_func, a=norm_node, b=-5.0)\n    \n        # Generate 100,000 samples.\n        _ = val_node.sample_parameters(num_samples=100_000)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_chained_evaluate", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "24dbbe12799645d6a395081dd4fa154886941881a71a46750f12c3a1999ee267", "warmup_time": -1}, "benchmarks.TimeSuite.time_evaluate_salt3_model": {"code": "class TimeSuite:\n    def time_evaluate_salt3_model(self):\n        \"\"\"Time querying a predefined salt3 model.\"\"\"\n        _ = self.salt3_model.evaluate(\n            self.times,\n            self.wavelengths,\n            graph_state=self.graph_state,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_evaluate_salt3_model", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "99a8c237be76a988dbcec4e66a5dbe178c2cf3942a23f27757ae1132845a98db", "warmup_time": -1}, "benchmarks.TimeSuite.time_evaluate_salt3_passbands": {"code": "class TimeSuite:\n    def time_evaluate_salt3_passbands(self):\n        \"\"\"Time evaluate the SALT3 model at the passband level.\"\"\"\n        _ = self.salt3_model.get_band_fluxes(\n            self.passbands,\n            self.times,\n            self.filters,\n            self.graph_state,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_evaluate_salt3_passbands", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "75a6f92f1475ae05eacee924d4e505191e3d8ae94bb999e0fb9ebe15544c6337", "warmup_time": -1}, "benchmarks.TimeSuite.time_fnu_to_flam": {"code": "class TimeSuite:\n    def time_fnu_to_flam(self):\n        \"\"\"Time the fnu_to_flam function.\"\"\"\n        _ = fnu_to_flam(\n            self.fluxes,\n            self.wavelengths,\n            wave_unit=u.AA,\n            flam_unit=u.erg / u.second / u.cm**2 / u.AA,\n            fnu_unit=u.nJy,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_fnu_to_flam", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "deaaf9fe7bfa04a19eb655499dcf49508375070fb102112c7dd39ed6f9e8268f", "warmup_time": -1}, "benchmarks.TimeSuite.time_load_passbands": {"code": "class TimeSuite:\n    def time_load_passbands(self):\n        \"\"\"Time loading the passbands from files.\"\"\"\n        _ = _load_test_passbands()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_load_passbands", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4d744c2f1132c8db040ca424d54e80b828b893b0b362111e59265c74bb951e20", "warmup_time": -1}, "benchmarks.TimeSuite.time_make_new_salt3_model": {"code": "class TimeSuite:\n    def time_make_new_salt3_model(self):\n        \"\"\"Time creating a new SALT3 model.\"\"\"\n        _ = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_make_new_salt3_model", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e4bfaee546a0529dd8587824888393e57090864f28704dffe8ac311b06900295", "warmup_time": -1}, "benchmarks.TimeSuite.time_make_x1_from_hostmass": {"code": "class TimeSuite:\n    def time_make_x1_from_hostmass(self):\n        \"\"\"Time the creation of the X1 function.\"\"\"\n        _ = HostmassX1Func(self.hostmass)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_make_x1_from_hostmass", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b3e3540b7d214997fa6491b2b924313c65f6ed4f1a95428d9c135ab4a919bd28", "warmup_time": -1}, "benchmarks.TimeSuite.time_sample_x0_from_distmod": {"code": "class TimeSuite:\n    def time_sample_x0_from_distmod(self):\n        \"\"\"Time the computation of the X0 function.\"\"\"\n        _ = self.x0_func.sample_parameters()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_sample_x0_from_distmod", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "83d97c46dfa1a0b88690350683a0dfc3260c41a9e4761822a5467a1b67dba43e", "warmup_time": -1}, "benchmarks.TimeSuite.time_sample_x1_from_hostmass": {"code": "class TimeSuite:\n    def time_sample_x1_from_hostmass(self):\n        \"\"\"Time the computation of the X1 function.\"\"\"\n        _ = self.x1_func.sample_parameters()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate(self.times, self.wavelengths, graph_state=self.graph_state)", "min_run_count": 2, "name": "benchmarks.TimeSuite.time_sample_x1_from_hostmass", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "84c2b85effb6b661758348c42460eed4fd580fdd47471bc279ce8f98c7326e7f", "warmup_time": -1}}, "machines": {"gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}