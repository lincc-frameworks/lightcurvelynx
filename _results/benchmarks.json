{
    "benchmarks.TimeSuite.time_additive_multi_model_source": {
        "code": "class TimeSuite:\n    def time_additive_multi_model_source(self):\n        \"\"\"Time the creation and query of an AdditiveMultiSourceModel.\"\"\"\n        source1 = StaticSource(brightness=100.0, node_label=\"my_static_source\")\n        source2 = StepSource(brightness=50.0, t0=1.0, t1=2.0, node_label=\"my_step_source\")\n        model = AdditiveMultiSourceModel([source1, source2], node_label=\"my_multi_source\")\n    \n        num_samples = 1000\n        state = model.sample_parameters(num_samples=num_samples)\n    \n        times = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0])\n        wavelengths = np.array([1000.0, 2000.0, 3000.0, 4000.0])\n        _ = model.evaluate_sed(times, wavelengths, state)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_additive_multi_model_source",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4caac97570e410fc533a56c94f38ec8293579023941dcf7e2b6b0db80898eb09",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_apply_passbands": {
        "code": "class TimeSuite:\n    def time_apply_passbands(self):\n        \"\"\"Time applying the (already loaded) passbands to flux.\"\"\"\n        _ = self.passbands.fluxes_to_bandfluxes(self.fluxes)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_apply_passbands",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cec13b80eb1186f315caefdf241a685e29ba98fb005c720b29c0f60f8d53eaf6",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_apply_white_noise": {
        "code": "class TimeSuite:\n    def time_apply_white_noise(self):\n        \"\"\"Time the application of white noise to a sample.\"\"\"\n        _ = self.white_noise.apply(self.fluxes, white_noise_sigma=0.1)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_apply_white_noise",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3921ed3101cd6f16ba258247148b85841b15abf16f7986029a928e97acfba28c",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_chained_evaluate_sed": {
        "code": "class TimeSuite:\n    def time_chained_evaluate_sed(self):\n        \"\"\"Time the generation of random numbers with an numpy generation node.\"\"\"\n    \n        def _add_func(a, b):\n            return a + b\n    \n        # Generate a starting mean and scale from uniform distributions. Use those to\n        # generate a sample from the normal distribution. Then shift that sample by -5.0.\n        loc_node = NumpyRandomFunc(\"uniform\", low=10.0, high=20.0)\n        scale_node = NumpyRandomFunc(\"uniform\", low=0.5, high=1.0)\n        norm_node = NumpyRandomFunc(\"normal\", loc=loc_node, scale=scale_node)\n        val_node = FunctionNode(_add_func, a=norm_node, b=-5.0)\n    \n        # Generate 100,000 samples.\n        _ = val_node.sample_parameters(num_samples=100_000)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_chained_evaluate_sed",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1d46676b8e62c8f5426888a6a5b8048011bea76ca15c31bdf868532ccd8826e7",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_evaluate_salt3_model": {
        "code": "class TimeSuite:\n    def time_evaluate_salt3_model(self):\n        \"\"\"Time querying a predefined salt3 model.\"\"\"\n        _ = self.salt3_model.evaluate_sed(\n            self.times,\n            self.wavelengths,\n            graph_state=self.graph_state,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_evaluate_salt3_model",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6c3bfd8d29009fa8de77a7455ff9a85afcd9432cf20b265fbd0562ce4e989713",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_evaluate_salt3_passbands": {
        "code": "class TimeSuite:\n    def time_evaluate_salt3_passbands(self):\n        \"\"\"Time evaluate the SALT3 model at the passband level.\"\"\"\n        _ = self.salt3_model.evaluate_band_fluxes(\n            self.passbands,\n            self.times,\n            self.filters,\n            self.graph_state,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_evaluate_salt3_passbands",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "8f6bcd94b92bc46e4b88e8cefeae66615c10760b70679afe59ab9ab457f193fb",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_evaluate_simple_linear_wavelength_source": {
        "code": "class TimeSuite:\n    def time_evaluate_simple_linear_wavelength_source(self):\n        \"\"\"Time evaluating a simple LinearWavelengthSource.\"\"\"\n        _ = self.linear_source.evaluate_sed(self.times, self.wavelengths)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_evaluate_simple_linear_wavelength_source",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7f87b378b3a5641930b0db9a05da8cb0d24f13def39d4ad6baca9baf57422002",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_fnu_to_flam": {
        "code": "class TimeSuite:\n    def time_fnu_to_flam(self):\n        \"\"\"Time the fnu_to_flam function.\"\"\"\n        _ = fnu_to_flam(\n            self.fluxes,\n            self.wavelengths,\n            wave_unit=u.AA,\n            flam_unit=u.erg / u.second / u.cm**2 / u.AA,\n            fnu_unit=u.nJy,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_fnu_to_flam",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "6f44dca31bf53db697643c36c4820d2bf43765c2dc47cc82123eaedd6a721b92",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_lightcurve_source": {
        "code": "class TimeSuite:\n    def time_lightcurve_source(self):\n        \"\"\"Time the creation and query of a LightcurveTemplateModel.\"\"\"\n        lc_times = np.linspace(0.0, 6 * np.pi, 100)\n        g_gluxes = np.sin(lc_times) + 3.0\n        r_gluxes = np.cos(lc_times) + 5.0\n    \n        lightcurves = {\n            \"g\": np.column_stack((lc_times, g_gluxes)),\n            \"r\": np.column_stack((lc_times, r_gluxes)),\n        }\n        lc_source = LightcurveTemplateModel(\n            lightcurves,\n            self.passbands,\n            lc_t0=0.0,\n            periodic=True,\n            baseline=None,\n            t0=0.0,\n        )\n    \n        # Sample the lightcurve source to ensure it works.\n        _ = lc_source.evaluate_sed(self.times, self.wavelengths)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_lightcurve_source",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b3d2b8cba3b89fd9d1b94c4ab7572369ded91f97d85f4addab93ab7d437e1424",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_load_passbands": {
        "code": "class TimeSuite:\n    def time_load_passbands(self):\n        \"\"\"Time loading the passbands from files.\"\"\"\n        _ = _load_test_passbands()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_load_passbands",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "27d48768d057e897864834255f8b50a26f41d92e7211981549982740724ccbcb",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_make_and_evaluate_static_sed": {
        "code": "class TimeSuite:\n    def time_make_and_evaluate_static_sed(self):\n        \"\"\"Time the creation and evaluation of a static SED source model.\"\"\"\n        sed = np.array(\n            [\n                [50.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0],  # Wavelengths\n                [5.0, 10.0, 20.0, 20.0, 10.0, 5.0, 1.0],  # fluxes\n            ]\n        )\n        model = StaticSEDSource(sed, node_label=\"test\")\n        states = model.sample_parameters(num_samples=1000)\n    \n        times = np.array([1, 2, 3, 10, 20])\n        wavelengths = np.array([50.0, 100.0, 150.0, 200.0, 250.0, 300.0, 350.0, 400.0, 450.0])\n    \n        _ = model.evaluate_sed(times, wavelengths, states)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_make_and_evaluate_static_sed",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bfe331dcdf9baed48fbdb3148e65cec041c975c874080658509b2c0c5ba6c761",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_make_and_evaluate_step_source": {
        "code": "class TimeSuite:\n    def time_make_and_evaluate_step_source(self):\n        \"\"\"Time creating and evaluating a StepSource.\"\"\"\n        model = StepSource(brightness=100.0, t0=2.0, t1=5.0)\n        state = model.sample_parameters()\n        times = np.arange(0.0, 10.0, 0.05)\n        wavelengths = np.arange(1000.0, 2000.0, 5.0)\n        _ = model.evaluate_sed(times, wavelengths, state)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_make_and_evaluate_step_source",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cbe0ecf5c0ebc1f4fd053b70c4d1cb950b05ddaca9498d32f1ca1f0543be93b0",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_make_evaluate_static_source": {
        "code": "class TimeSuite:\n    def time_make_evaluate_static_source(self):\n        \"\"\"Time creating and querying a static source model.\"\"\"\n        source1 = StaticSource(brightness=100.0, node_label=\"my_static_source\")\n        state = source1.sample_parameters(num_samples=1000)\n    \n        times = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0])\n        wavelengths = np.array([1000.0, 2000.0, 3000.0, 4000.0])\n        _ = source1.evaluate_sed(times, wavelengths, state)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_make_evaluate_static_source",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2d8b4e659d1d1d1cbeb79a49e0b767ba6f9afb3a91a8b0b7e17978c4b1d91ffa",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_make_new_salt3_model": {
        "code": "class TimeSuite:\n    def time_make_new_salt3_model(self):\n        \"\"\"Time creating a new SALT3 model.\"\"\"\n        _ = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_make_new_salt3_model",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d11890cbd5279138e9580bae8d3dbed5735e613c6f19aaa72e352a91baae94a0",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_make_simple_linear_wavelength_source": {
        "code": "class TimeSuite:\n    def time_make_simple_linear_wavelength_source(self):\n        \"\"\"Time creating a simple LinearWavelengthSource.\"\"\"\n        _ = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_make_simple_linear_wavelength_source",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3cc2e1bbbe6345642dfcfe2ab8bf539558e81c58bc0de9a35ff486617b80a1b3",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_make_x1_from_hostmass": {
        "code": "class TimeSuite:\n    def time_make_x1_from_hostmass(self):\n        \"\"\"Time the creation of the X1 function.\"\"\"\n        _ = HostmassX1Func(self.hostmass)\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_make_x1_from_hostmass",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "5b159ce915dac65116a3e11504ef62d3ffacae18f94382d6abb195e302671d89",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_sample_x0_from_distmod": {
        "code": "class TimeSuite:\n    def time_sample_x0_from_distmod(self):\n        \"\"\"Time the computation of the X0 function.\"\"\"\n        _ = self.x0_func.sample_parameters()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_sample_x0_from_distmod",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b45cd27367d38e7f3cdd777e9c35c9922729bd62773fde6b586cfd63da932edf",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_sample_x1_from_hostmass": {
        "code": "class TimeSuite:\n    def time_sample_x1_from_hostmass(self):\n        \"\"\"Time the computation of the X1 function.\"\"\"\n        _ = self.x1_func.sample_parameters()\n\n    def setup(self):\n        \"\"\"Set up items that will be used in multiple tests.\"\"\"\n        # Preload the passbands for tests that use them.\n        self.passbands = _load_test_passbands()\n    \n        # Create a model we can use in tests.\n        self.redshift = 0.1\n        self.hostmass = 8.0\n        self.distmod_func = DistModFromRedshift(self.redshift, H0=73.0, Omega_m=0.3)\n        self.x1_func = HostmassX1Func(self.hostmass)\n        self.x0_func = X0FromDistMod(\n            distmod=self.distmod_func,\n            x1=self.x1_func,\n            c=0.0,\n            alpha=0.14,\n            beta=3.1,\n            m_abs=-19.3,\n        )\n    \n        self.salt3_model = SncosmoWrapperModel(\n            \"salt3\",\n            t0=0.0,\n            x0=self.x0_func,\n            x1=self.x1_func,\n            c=0.0,\n            ra=0.0,\n            dec=0.0,\n            redshift=self.redshift,\n        )\n    \n        # A simple LinearWavelengthSource that we can use in tests.\n        self.linear_source = LinearWavelengthSource(linear_base=1.0, linear_scale=0.1)\n    \n        # Create samples that we can use in tests.\n        self.times = np.arange(-20.0, 50.0, 0.5)\n        self.wavelengths = self.passbands.waves\n        self.filter_options = [\"LSST_g\", \"LSST_r\"]\n        self.filters = np.array([self.filter_options[i % 2] for i in range(len(self.times))])\n    \n        self.graph_state = self.salt3_model.sample_parameters()\n        self.fluxes = self.salt3_model.evaluate_sed(\n            self.times, self.wavelengths, graph_state=self.graph_state\n        )\n    \n        self.white_noise = WhiteNoise(white_noise_sigma=0.1)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_sample_x1_from_hostmass",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "23584f73459797b022a12f4dadfd7d96c9eb2126beabcf215a69b9f4ba85bf39",
        "warmup_time": -1
    },
    "version": 2
}